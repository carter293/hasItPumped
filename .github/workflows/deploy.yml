name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run FastAPI Tests
    runs-on: ubuntu-latest
    # Remove the slim container and use the standard runner
    defaults:
      run:
        working-directory: ./hasItPumped/backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache Poetry and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          pip install poetry==1.7.1
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run tests
        run: poetry run pytest -xvs --no-header

  deploy-backend:
    name: Deploy FastAPI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hasItPumped/backend
    # needs: test
    outputs:
      backend_url: ${{ steps.set-url.outputs.backend_url }}
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      # - run: flyctl deploy --remote-only
      #   env:
      #     FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - name: Set Backend URL
        id: set-url
        run: |
          BACKEND_URL=$(flyctl status --json | jq -r '.Hostname')
          echo "backend_url=https://$BACKEND_URL" >> $GITHUB_OUTPUT
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy:
    name: Deploy Frontend to Vercel
    needs: deploy-backend 
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hasItPumped/frontend 
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
    
      - name: Create .env file with backend URL
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ needs.deploy-backend.outputs.backend_url }}" > .env
    
      - name: Pull Vercel Environment Information
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          fi
          
      - name: Build Project Artifacts
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi
        env:
          NEXT_PUBLIC_API_URL: ${{ needs.deploy-backend.outputs.backend_url }}
          
      - name: Deploy Project Artifacts to Vercel
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
            echo "Production deployment: $DEPLOYMENT_URL"
          else
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
            echo "Preview deployment: $DEPLOYMENT_URL"
          fi