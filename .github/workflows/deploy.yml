name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  fastapi-unit-test:
    name: Run FastAPI Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hasItPumped/backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache Poetry and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          pip install poetry==1.7.1
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run tests
        run: poetry run pytest -xvs --no-header

  dev-backend-deploy:
    name: Dev Deploy FastAPI Backend to Render
    environment: dev
    runs-on: ubuntu-latest
    # needs: fastapi-unit-test
    outputs:
      backend_url: ${{ steps.set-url.outputs.backend_url }}
    steps:
      - name: Cache Render CLI
        id: cache-render-cli
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/render
          key: ${{ runner.os }}-render-cli-v1.1.0
          
      - name: Install Render CLI
        if: steps.cache-render-cli.outputs.cache-hit != 'true'
        run: |
          curl -L https://github.com/render-oss/cli/releases/download/v1.1.0/cli_1.1.0_linux_amd64.zip -o render.zip
          unzip render.zip
          sudo mv cli_v1.1.0 /usr/local/bin/render
          chmod +x /usr/local/bin/render

      - name: Verify Render CLI Installation
        run: |
          render --version
      
      - name: Trigger deploy with Render CLI
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_WORKSPACE: ${{ secrets.RENDER_WORKSPACE }}
          CI: true
        run: |
          # Trigger deployment and store the response
          DEPLOY_INFO=$(render deploys create ${{ secrets.RENDER_SERVICE_ID }} --wait --output json --confirm)
          echo "Deploy triggered successfully"
          
          # Extract and output deploy ID
          DEPLOY_ID=$(echo $DEPLOY_INFO | jq -r '.id')
          echo "Deploy ID: $DEPLOY_ID"
          
          # Check if the deployment was successful
          DEPLOY_STATUS=$(echo $DEPLOY_INFO | jq -r '.status')
          if [ "$DEPLOY_STATUS" != "live" ]; then
            echo "Deployment failed with status: $DEPLOY_STATUS"
            exit 1
          fi
          
          echo "Deployment completed successfully!"

      - name: Get Service Details
        id: set-url
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_WORKSPACE: ${{ secrets.RENDER_WORKSPACE }}
        run: |
          SERVICE_JSON=$(render services --output json --confirm)
          SERVICE_URL=$(echo "$SERVICE_JSON" | jq -r ".[] | select(.service.id==\"${{ secrets.RENDER_SERVICE_ID }}\") | .service.serviceDetails.url")
          echo "Service URL: $SERVICE_URL"
          echo "backend_url=$SERVICE_URL" >> $GITHUB_OUTPUT

  dev-frontend-deploy:
    name: Dev Deploy Frontend to Vercel
    environment: dev
    needs: dev-backend-deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hasItPumped/frontend 
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
    
      - name: Create .env file with backend URL
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ needs.dev-backend-deploy.outputs.backend_url }}" > .env
      
      - name: Create Vercel configuration
        run: |
          mkdir -p .vercel
          echo '{"orgId":"${{ secrets.VERCEL_ORG_ID }}","projectId":"${{ secrets.VERCEL_PROJECT_ID }}"}' > .vercel/project.json
    
      - name: Pull Vercel Environment Information
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          fi
          
      - name: Build Project Artifacts
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi
        env:
          NEXT_PUBLIC_API_URL: ${{ needs.dev-backend-deploy.outputs.backend_url }}
          
      - name: Deploy Project Artifacts to Vercel
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
            echo "Production deployment: $DEPLOYMENT_URL"
          else
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
            echo "Preview deployment: $DEPLOYMENT_URL"
          fi

  prod-backend-deploy:
    name: Prod Deploy FastAPI Backend to Render
    environment: prod
    runs-on: ubuntu-latest
    needs: dev-frontend-deploy
    outputs:
      backend_url: ${{ steps.set-url.outputs.backend_url }}
    steps:
      - name: Cache Render CLI
        id: cache-render-cli
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/render
          key: ${{ runner.os }}-render-cli-v1.1.0
          
      - name: Install Render CLI
        if: steps.cache-render-cli.outputs.cache-hit != 'true'
        run: |
          curl -L https://github.com/render-oss/cli/releases/download/v1.1.0/cli_1.1.0_linux_amd64.zip -o render.zip
          unzip render.zip
          sudo mv cli_v1.1.0 /usr/local/bin/render
          chmod +x /usr/local/bin/render

      - name: Verify Render CLI Installation
        run: |
          render --version

      - name: Trigger deploy with Render CLI
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_WORKSPACE: ${{ secrets.RENDER_WORKSPACE }}
          CI: true
        run: |
          # Trigger deployment and store the response
          DEPLOY_INFO=$(render deploys create ${{ secrets.RENDER_SERVICE_ID }} --wait --output json --confirm)
          echo "Deploy triggered successfully"
          
          # Extract and output deploy ID
          DEPLOY_ID=$(echo $DEPLOY_INFO | jq -r '.id')
          echo "Deploy ID: $DEPLOY_ID"
          
          # Check if the deployment was successful
          DEPLOY_STATUS=$(echo $DEPLOY_INFO | jq -r '.status')
          if [ "$DEPLOY_STATUS" != "live" ]; then
            echo "Deployment failed with status: $DEPLOY_STATUS"
            exit 1
          fi
          
          echo "Deployment completed successfully!"

      - name: Get Service Details
        id: set-url
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_WORKSPACE: ${{ secrets.RENDER_WORKSPACE }}
        run: |
          SERVICE_JSON=$(render services --output json --confirm)
          SERVICE_URL=$(echo "$SERVICE_JSON" | jq -r ".[] | select(.service.id==\"${{ secrets.RENDER_SERVICE_ID }}\") | .service.serviceDetails.url")
          echo "Service URL: $SERVICE_URL"
          echo "backend_url=$SERVICE_URL" >> $GITHUB_OUTPUT

  prod-frontend-deploy:
    name: Prod Deploy Frontend to Vercel
    environment: prod
    needs: prod-backend-deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hasItPumped/frontend 
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
    
      - name: Create .env file with backend URL
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ needs.prod-backend-deploy.outputs.backend_url }}" > .env
      
      - name: Create Vercel configuration
        run: |
          mkdir -p .vercel
          echo '{"orgId":"${{ secrets.VERCEL_ORG_ID }}","projectId":"${{ secrets.VERCEL_PROJECT_ID }}"}' > .vercel/project.json
    
      - name: Pull Vercel Environment Information
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          fi
          
      - name: Build Project Artifacts
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi
        env:
          NEXT_PUBLIC_API_URL: ${{ needs.prod-backend-deploy.outputs.backend_url }}
          
      - name: Deploy Project Artifacts to Vercel
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
            echo "Production deployment: $DEPLOYMENT_URL"
          else
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
            echo "Preview deployment: $DEPLOYMENT_URL"
          fi